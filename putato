#!/usr/bin/env python3

import enum
import sqlite3

@enum.unique
class State(enum.Enum):
    Created = 1
    Running = 2
    Finished = 3
    Failed = 4

class Storage(object):

    def __init__(self, db_file=":memory:"):
        self.state = State.Created
        self.connection = sqlite3.connect(db_file)

    def transaction(self):
        """Generates a single use context manager to make edits to the contents
        of the database."""
        return Transaction(self)

    def table(self, table_name):
        """Returns a table, that can be used to add, remove, or update
        values. If the table doesn't exist, it is created."""
        for c in table_name:
            if not c.isalnum():
                raise RuntimeError("Table Name must be letters and numbers.")
        return Table(table_name, self, self.connection.cursor())

    def require_running(self, message):
        if self.state is not State.Running:
            raise RuntimeError(message)

    def abort(self):
        """Aborts the current flow of execution, exiting the block that created
        the Transaction object, and aborting the current transaction."""
        # throw an exception, then make it disappear in __exit__/3
        self.require_running("abort invoked outside of running transaction")
        raise RollbackTransaction()

    def finished(self):
        """Returns True if the transaction was committed, False if it was
        rolled back (or was forced to rollback due to an exception). If invoked
        inside a running transaction or before having started a transaction, it
        throws an error."""
        if self.state not in [State.Finished, State.Failed]:
            raise RuntimeError(
                "finished invoked before transaction committed or rolledback")
        else:
            return self.state is State.Finished

class Transaction(object):

    def __init__(self, db):
        self.db = db

    def __enter__(self):
        self.db.connection.__enter__()
        self.db.state = State.Running
        return self

    def __exit__(self, type, value, tb):
        self.db.connection.__exit__(type, value, tb)
        if value is None:
            self.db.state = State.Finished
        else:
            self.db.state = State.Failed
        if isinstance(value, RollbackTransaction):
            return True


class Table(object):

    def __init__(self, table_name, db, cursor):
        self.table = table_name
        self.db = db
        self.cursor = cursor
        self.cursor.execute('CREATE TABLE IF NOT EXISTS %s ( key TEXT PRIMARY KEY ON CONFLICT REPLACE, value BYTES );' % self.table)

    def get(self, key):
        """Retrieves a key from the table. Returns the value, or None if no
        value is found."""
        self.cursor.execute('SELECT value FROM %s WHERE key = ?;' % self.table, (key,))
        value = self.cursor.fetchone()
        if value:
            return value[0]
        else:
            return None

    def put(self, key, value):
        """Overwrites the current value of the key, or adds it."""
        self.db.require_running(
            "table.put() can only be invoked in transaction")
        self.cursor.execute('INSERT INTO %s (key, value) VALUES (?,?)' % self.table, (key,value))

    def remove(self, *keys):
        """Deletes a key from the table. Does nothing if they key does not exist."""
        self.db.require_running(
            "table.remove() can only be invoked in transaction")
        self.cursor.execute('DELETE FROM %s WHERE key = ?;' % self.table, keys)

    def list(self):
        """Returns a generator that lists all the keys in the table."""
        self.cursor.execute('SELECT key FROM %s;' % self.table)
        for result in self.cursor:
            yield(result[0])


class RollbackTransaction(Exception):
    """Internal exception type that denotes the running Transaction should
    abort."""
    pass


if __name__ == "__main__":
    import click
    import sys

    # To use this as a python script
    options = { 'instance' : None, 'db' : None, 'table' : None }
    def get_db():
        if not options["instance"]:
            options["instance"] = Storage(options['db'])
        return options ["instance"]
    def get_table():
        return get_db().table(options['table'])

    @click.group()
    @click.option("--db", "-d", default=".db.sqlite3", help="database file, default=.db.sqlite3")
    @click.option("--table", "-t", default="kv", help="sets the table name, default=kv")
    def nb(**kvargs):
        options.update(kvargs)

    @nb.command("shell")
    def interactive():
        db = get_db()
        table = get_table()
        def change_table(a):
            table = db.table(*a)
        cmd_map = {
            "table" : change_table,
            "put"   : lambda a: table.put(*a),
            "get"   : lambda a: print(table.get(*a)),
            "list"  : lambda a: print(*table.list(*a)),
            "remove": lambda a: table.remove(*a),
            "abort" : lambda a: db.abort(),
            "exit"  : lambda a: sys.exit(0),
        }
        with get_db().transaction():
            while True:
                line = sys.stdin.readline()
                if line is "":
                    break
                line = line.strip()
                cmd, *args = line.split(" ")
                func = cmd_map.get(cmd, lambda a: print("unknown command:", line))
                func(args)

    @nb.command("list", short_help="List all keys in the database")
    def list_items():
        db = get_db()
        table = get_table()
        with get_db().transaction():
            for key in table.list():
                if key is not None:
                    print(key)

    @nb.command("get", short_help="fetchs the keys requested, in order, and prints them one per line")
    @click.argument("keys", nargs = -1)
    def get_items(keys):
        db = get_db()
        table = get_table()
        with get_db().transaction():
            for key in keys:
                item = table.get(key)
                if item is not None:
                    print(item)
                else:
                    print("")

    @nb.command("put", short_help="sets the specified key to the supplied value, overwrites existing entries")
    @click.argument("args", nargs = 2)
    def put_items(args):
        db = get_db()
        table = get_table()
        with get_db().transaction():
            table.put(*args)

    @nb.command("remove", short_help="deletes a key")
    @click.argument("keys", nargs = -1)
    def remove_items(keys):
        db = get_db()
        table = get_table()
        with get_db().transaction():
            for key in keys:
                item = table.remove(key)
                print("removed:", key)

    nb()
